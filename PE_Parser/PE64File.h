#pragma once
#include "RichHeader.h"
#include <iostream>
#include <filesystem>
#include <fstream>

namespace fs = std::filesystem;

class PE64File
{
public:
	PE64File(const std::string& name, std::ifstream&& pe_file)
		:
		name{ name },
		pe_file{ std::move(pe_file) }
	{
        ParseFile();
	}
    void PrintInfo();
    int INITPARSE();

private:
	std::string name;
    std::ifstream pe_file;
    int _import_directory_count{}, _import_directory_size{};
    int _basreloc_directory_count{};

    // HEADERS
    IMAGE_DOS_HEADER     PEFILE_DOS_HEADER;
    IMAGE_NT_HEADERS64   PEFILE_NT_HEADERS;

    // DOS HEADER
    DWORD PEFILE_DOS_HEADER_EMAGIC;
    LONG  PEFILE_DOS_HEADER_LFANEW;

    // RICH HEADER
    RICH_HEADER_INFO PEFILE_RICH_HEADER_INFO;
    RICH_HEADER PEFILE_RICH_HEADER;
    std::vector<RICH_HEADER_ENTRY> vec_entries;

    // NT_HEADERS.Signature
    DWORD PEFILE_NT_HEADERS_SIGNATURE;

    // NT_HEADERS.FileHeader
    WORD PEFILE_NT_HEADERS_FILE_HEADER_MACHINE;
    WORD PEFILE_NT_HEADERS_FILE_HEADER_NUMBER0F_SECTIONS;
    WORD PEFILE_NT_HEADERS_FILE_HEADER_SIZEOF_OPTIONAL_HEADER;

    // NT_HEADERS.OptionalHeader
    DWORD PEFILE_NT_HEADERS_OPTIONAL_HEADER_MAGIC;
    DWORD PEFILE_NT_HEADERS_OPTIONAL_HEADER_SIZEOF_CODE;
    DWORD PEFILE_NT_HEADERS_OPTIONAL_HEADER_SIZEOF_INITIALIZED_DATA;
    DWORD PEFILE_NT_HEADERS_OPTIONAL_HEADER_SIZEOF_UNINITIALIZED_DATA;
    DWORD PEFILE_NT_HEADERS_OPTIONAL_HEADER_ADDRESSOF_ENTRYPOINT;
    DWORD PEFILE_NT_HEADERS_OPTIONAL_HEADER_BASEOF_CODE;
    ULONGLONG PEFILE_NT_HEADERS_OPTIONAL_HEADER_IMAGEBASE;
    DWORD PEFILE_NT_HEADERS_OPTIONAL_HEADER_SECTION_ALIGNMENT;
    DWORD PEFILE_NT_HEADERS_OPTIONAL_HEADER_FILE_ALIGNMENT;
    DWORD PEFILE_NT_HEADERS_OPTIONAL_HEADER_SIZEOF_IMAGE;
    DWORD PEFILE_NT_HEADERS_OPTIONAL_HEADER_SIZEOF_HEADERS;

    IMAGE_DATA_DIRECTORY PEFILE_EXPORT_DIRECTORY;
    IMAGE_DATA_DIRECTORY PEFILE_IMPORT_DIRECTORY;
    IMAGE_DATA_DIRECTORY PEFILE_RESOURCE_DIRECTORY;
    IMAGE_DATA_DIRECTORY PEFILE_EXCEPTION_DIRECTORY;
    IMAGE_DATA_DIRECTORY PEFILE_SECURITY_DIRECTORY;
    IMAGE_DATA_DIRECTORY PEFILE_BASERELOC_DIRECTORY;
    IMAGE_DATA_DIRECTORY PEFILE_DEBUG_DIRECTORY;
    IMAGE_DATA_DIRECTORY PEFILE_ARCHITECTURE_DIRECTORY;
    IMAGE_DATA_DIRECTORY PEFILE_GLOBALPTR_DIRECTORY;
    IMAGE_DATA_DIRECTORY PEFILE_TLS_DIRECTORY;
    IMAGE_DATA_DIRECTORY PEFILE_LOAD_CONFIG_DIRECTORY;
    IMAGE_DATA_DIRECTORY PEFILE_BOUND_IMPORT_DIRECTORY;
    IMAGE_DATA_DIRECTORY PEFILE_IAT_DIRECTORY;
    IMAGE_DATA_DIRECTORY PEFILE_DELAY_IMPORT_DIRECTORY;
    IMAGE_DATA_DIRECTORY PEFILE_COM_DESCRIPTOR_DIRECTORY;

    // SECTION HEADERS
    PIMAGE_SECTION_HEADER PEFILE_SECTION_HEADERS;
    std::vector<IMAGE_SECTION_HEADER> PEFILE_SECTION_HEADERS_VEC;

    // IMPORT TABLE
    PIMAGE_IMPORT_DESCRIPTOR PEFILE_IMPORT_TABLE;

    // BASE RELOCATION TABLE
    PIMAGE_BASE_RELOCATION PEFILE_BASERELOC_TABLE;

    // FUNCTIONS

    // ADDRESS RESOLVERS
    int  locate(DWORD VA) const;
    DWORD resolve(DWORD VA, int index);

    // PARSERS
    void ParseFile();
    void ParseDOSHeader();
    void ParseNTHeaders();
    void ParseSectionHeaders();
    void ParseImportDirectory();
    void ParseBaseReloc();
    void ParseRichHeader();

    // PRINT INFO
    void PrintFileInfo();
    void PrintDOSHeaderInfo();
    void PrintRichHeaderInfo();
    void PrintNTHeadersInfo();
    void PrintSectionHeadersInfo();
    void PrintImportTableInfo();
    void PrintBaseRelocationsInfo();

};